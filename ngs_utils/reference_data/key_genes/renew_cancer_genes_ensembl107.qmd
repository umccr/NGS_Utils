---
title: "UMCCR Cancer Genes (Ensembl 106)"
format:
  html:
    embed-resources: true
    standalone: true
    code-fold: show
    toc: true
editor: source
---

```{r pkg, warning=F, message=F}
require(biomaRt)
require(tidyverse)
require(glue)
require(here)
```

```{r}
umccr_genes <- list(
  commit = "9bf20c",
  repo = "umccr/NGS_Utils",
  path = "ngs_utils/reference_data/key_genes/umccr_cancer_genes.latest.genes"
)
gh_url <- with(umccr_genes, glue("https://github.com/{repo}/blob/{commit}/{path}"))
gh_url_raw <- with(umccr_genes, glue("https://raw.githubusercontent.com/{repo}/{commit}/{path}"))
umccr_genes <- gh_url_raw |>
  readr::read_tsv(col_names = "gene", col_types = "c") |>
  dplyr::pull(gene)
ensembl_version <- 107
```

## Introduction

We have a set of `r length(umccr_genes)` cancer genes at the [NGS_Utils](`r gh_url`) repository.
We want to get their Ensembl gene coordinates. We can use [biomaRt](https://bioconductor.org/packages/release/bioc/html/biomaRt.html)
to query the Ensembl `r ensembl_version` database:

```{r}
mart <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl", version = ensembl_version)
# can also grab "ensembl_gene_id"
attributes <- c("hgnc_symbol", "chromosome_name", "start_position", "end_position")
filters <- "hgnc_symbol"
values <- list("hgnc_symbol" = umccr_genes)
# Total: 1,186
d <- getBM(attributes=attributes, filters=filters, values=values, mart=mart) |>
  as_tibble() |>
  # get rid of rubbish (CHR_XXX_...)
  filter(!grepl("_", chromosome_name)) |>
  # RMRP duplicated, just keep the first one
  filter(!(hgnc_symbol == "RMRP" & start_position == 35657754))
glimpse(d)
# 71 unknown
unknown <- umccr_genes[!umccr_genes %in% d$hgnc_symbol]
glimpse(unknown)
```

Let's manually grab the HGNC symbols or coordinates.

- First the ones found from the HGNC website via <https://www.genenames.org/tools/multi-symbol-checker/>:

```{r}
unknown1 <- tibble::tribble(
  ~gene,  ~alias,
  "C15orf65", "PIERCE2",
  "C2orf40", "ECRG4",
  "C2orf44", "WDCP",
  "CARS", "CARS1",
  "CASC5", "KNL1",
  "CYR61", "CCN1",
  "FAM175A", "ABRAXAS1",
  "FAM46C", "TENT5C",
  "FAM58A", "CCNQ",
  "FGFR1OP", "CEP43",
  "H3F3A", "H3-3A",
  "H3F3B", "H3-3B",
  "H3F3C", "H3-5",
  "HIST1H1B", "H1-5",
  "HIST1H1C", "H1-2",
  "HIST1H1D", "H1-3",
  "HIST1H1E", "H1-4",
  "HIST1H2AC", "H2AC6",
  "HIST1H2AG", "H2AC11",
  "HIST1H2AL", "H2AC16",
  "HIST1H2AM", "H2AC17",
  "HIST1H2BC", "H2BC4",
  "HIST1H2BD", "H2BC5",
  "HIST1H2BG", "H2BC8",
  "HIST1H2BJ", "H2BC11",
  "HIST1H2BK", "H2BC12",
  "HIST1H2BO", "H2BC17",
  "HIST1H3A", "H3C1",
  "HIST1H3B", "H3C2",
  "HIST1H3C", "H3C3",
  "HIST1H3D", "H3C4",
  "HIST1H3E", "H3C6",
  "HIST1H3F", "H3C7",
  "HIST1H3G", "H3C8",
  "HIST1H3H", "H3C10",
  "HIST1H3I", "H3C11",
  "HIST1H3J", "H3C12",
  "HIST1H4I", "H4C9",
  "HIST2H3A", "H3C15",
  "HIST2H3C", "H3C14",
  "HIST2H3D", "H3C13",
  "HIST3H3", "H3-4",
  "KIAA1598", "SHTN1",
  "LHFP", "LHFPL6",
  "MKL1", "MRTFA",
  "MLLT4", "AFDN",
  "MRE11A", "MRE11",
  "PAK7", "PAK5",
  "PARK2", "PRKN",
  "PDL1", "CD274",
  "PDL2", "PDCD1LG2",
  "RFWD2", "COP1",
  "SEPT5", "SEPTIN5",
  "SEPT6", "SEPTIN6",
  "SEPT9", "SEPTIN9",
  "TAZ", "TAFAZZIN",
  "TCEB1", "ELOC",
  "TNFRSF6", "FAS",
  "WHSC1", "NSD2",
  "WHSC1L1", "NSD3",
  "WISP1", "CCN4",
  "WISP3", "CCN6",
  "ZNF198", "ZMYM2",
  "ZNF278", "PATZ1"
)
dt_view <- function(x, caption = NULL) {
  x |>
    DT::datatable(
      filter = list(position = "top", clear = FALSE, plain = TRUE),
      class = "cell-border display compact",
      rownames = FALSE,
      extensions = c("Scroller", "Buttons", "KeyTable"),
      options = list(
        scroller = TRUE, scrollY = 300, scrollX = TRUE,
        autoWidth = FALSE, keys = TRUE,
        buttons = c("csv", "excel"), dom = "Blfrtip"
      ),
      caption = caption
    )
}
```

```{r}
glimpse(unknown1)
values2 <- list("hgnc_symbol" = unknown1$alias)
d2 <- getBM(attributes=attributes, filters=filters, values=values2, mart=mart) |>
  as_tibble() |>
  filter(!grepl("_", chromosome_name)) # get rid of rubbish (CHR_XXX_...)
```

```{r}
unknown1 |>
  left_join(d2, by = c("alias" = "hgnc_symbol")) |> 
  rename(chr = chromosome_name, start = start_position, end = end_position) |>
  mutate(n = row_number()) |>
  select(n, everything()) |>
  dt_view(caption = "Genes with older HGNC symbol.")
```

---

- Now join them:

```{r}
# 1,232 = 1,186 + 64 - 18dups
d3 <- bind_rows(d, d2) |>
  distinct() # 18 dups removed where approved and synonym are in the umccr list
glimpse(d3)
```

- Next coordinates of the 7 remaining found via GeneCards:

```{r}
unknown2 <- tibble::tribble(
  ~gene,  ~chr, ~start, ~end,
  "CCAT1", "8", 127207381, 127219268,
  "IGH", "14", 105586437, 106879844,
  "IGK", "2", 88857361, 90235368,
  "IGL", "22", 22026076, 22922913,
  "TRA", "14", 21621904, 22552132,
  "TRB", "7", 142299011, 142813287,
  "TRD", "14", 22422546, 22466577
)

unknown2 |>
  mutate(n = row_number()) |>
  select(n, everything()) |>
  dt_view(caption = "Genes with no hits in Ensembl.")
```

---

## Final Results

- Now gather all (1,187 + 63 + 7 - 18 = 1,239)

```{r}
res <- d3 |>
  select(gene = hgnc_symbol, chr = chromosome_name, start = start_position, end = end_position) |>
  bind_rows(unknown2) |>
  mutate(chr = paste0("chr", chr)) |>
  arrange(gene)

res |>
  mutate(n = row_number()) |>
  select(n, everything()) |>
  dt_view(caption = glue("UMCCR Cancer Genes Ensembl {ensembl_version} (Total: {nrow(res)})"))
```

---

- Generate a BED with some padding and sort:

```{r}
# add +1000bp buffer just to be safe
pad <- 1000
bed_out <- here("ngs_utils/reference_data/key_genes",
                glue("umccr_cancer_genes.hg38.ensembl{ensembl_version}"))
bed_out_unsorted <- glue("{bed_out}.bed")
bed_out_sorted <- glue("{bed_out}.sort.bed")
res |>
  mutate(start = start - pad, end = end + pad) |>
  select(chr, start, end, gene) |>
  write_tsv(bed_out_unsorted, col_names = FALSE)
system(glue("sort -k1,1V -k2,2n -k3,3n {bed_out_unsorted} > {bed_out_sorted}"))
invisible(file.remove(bed_out_unsorted))
```
